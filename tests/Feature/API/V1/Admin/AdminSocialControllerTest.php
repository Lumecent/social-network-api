<?php

namespace Tests\Feature\API\V1\Admin;

use App\Helpers\Test\TestHelper;
use Illuminate\Support\Str;
use Tests\BaseTest;

class AdminSocialControllerTest extends BaseTest
{
    private $dataSocial;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->initAuthoriseRequest();

        $this->dataSocial = [
            'name' => $this->faker->lastName,
            'regex' => Str::random()
        ];

        $this->urls = [
            'social' => 'api/v1/admin/social'
        ];
    }

    public function testCreateSocialEmptyForm()
    {
        $response = $this->postJson($this->urls['social'], [], $this->header);

        $response->assertStatus(422);
    }

    public function testCreateSocialWrongName()
    {
        $this->dataSocial['name'] = $this->faker->text();

        $response = $this->postJson($this->urls['social'], $this->dataSocial, $this->header);

        $response->assertStatus(422);
    }

    public function testCreateSocialNotUniqueName()
    {
        $this->dataSocial['name'] = 'fb';

        $response = $this->postJson($this->urls['social'], $this->dataSocial, $this->header);

        $response->assertStatus(422);
    }

    public function testCreateSocial()
    {
        $response = $this->postJson($this->urls['social'], $this->dataSocial, $this->header);

        $response->assertStatus(200);
    }

    public function testUpdateSocialEmptyForm()
    {
        $this->dataSocial['id'] = TestHelper::getAdminLastSocial()->id;

        $response = $this->putJson("{$this->urls['social']}/{$this->dataSocial['id']}", [], $this->header);

        $response->assertStatus(422);
    }

    public function testUpdateSocialWrongName()
    {
        $this->dataSocial['id'] = TestHelper::getAdminLastSocial()->id;
        $this->dataSocial['name'] = $this->faker->text();

        $response = $this->putJson("{$this->urls['social']}/{$this->dataSocial['id']}", $this->dataSocial, $this->header);

        $response->assertStatus(422);
    }

    public function testUpdateSocialNotUniqueName()
    {
        $this->dataSocial['id'] = TestHelper::getAdminLastSocial()->id;
        $this->dataSocial['name'] = 'fb';

        $response = $this->putJson("{$this->urls['social']}/{$this->dataSocial['id']}", $this->dataSocial, $this->header);

        $response->assertStatus(422);
    }

    public function testUpdateSocialNotExistsId()
    {
        $this->dataSocial['id'] = 0;

        $response = $this->putJson("{$this->urls['social']}/{$this->dataSocial['id']}", $this->dataSocial, $this->header);

        $response->assertStatus(422);
    }

    public function testUpdateSocial()
    {
        $this->dataSocial['id'] = TestHelper::getAdminLastSocial()->id;

        $response = $this->putJson("{$this->urls['social']}/{$this->dataSocial['id']}", $this->dataSocial, $this->header);

        $response->assertStatus(200);
    }

    public function testDeleteSocialNotExistsId()
    {
        $this->dataSocial['id'] = 0;

        $response = $this->deleteJson("{$this->urls['social']}/{$this->dataSocial['id']}", $this->dataSocial, $this->header);

        $response->assertStatus(422);
    }

    public function testDeleteSocial()
    {
        $this->dataSocial['id'] = TestHelper::getAdminLastSocial()->id;

        $response = $this->deleteJson("{$this->urls['social']}/{$this->dataSocial['id']}", $this->dataSocial, $this->header);

        $response->assertStatus(200);
    }
}
