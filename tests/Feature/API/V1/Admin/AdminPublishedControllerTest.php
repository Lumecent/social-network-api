<?php

namespace Tests\Feature\API\V1\Admin;

use App\Helpers\Test\TestHelper;
use Tests\BaseTest;

class AdminPublishedControllerTest extends BaseTest
{
    private $dataPublished;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->initAuthoriseRequest();

        $this->dataPublished = [
            'id' => TestHelper::getLastPublished()->id,
            'name' => $this->faker->lastName,
        ];

        $this->urls = [
            'published' => 'api/v1/admin/published'
        ];
    }

    public function testCreatePublishedEmptyForm()
    {
        $response = $this->postJson($this->urls['published'], [], $this->header);

        $response->assertStatus(422);
    }

    public function testCreatePublishedWrongName()
    {
        $this->dataPublished['name'] = 'n@me';

        $response = $this->postJson($this->urls['published'], $this->dataPublished, $this->header);

        $response->assertStatus(422);
    }

    public function testCreatePublished()
    {
        $response = $this->postJson($this->urls['published'], $this->dataPublished, $this->header);

        $response->assertStatus(200);
    }

    public function testUpdatePublishedWrongName()
    {
        $this->dataPublished['name'] = 'n@me';

        $response = $this->putJson("{$this->urls['published']}/{$this->dataPublished['id']}", $this->dataPublished, $this->header);

        $response->assertStatus(422);
    }

    public function testUpdatePublishedNotExistsPublished()
    {
        $this->dataPublished['id'] = 0;

        $response = $this->putJson("{$this->urls['published']}/{$this->dataPublished['id']}", $this->dataPublished, $this->header);

        $response->assertStatus(422);
    }

    public function testUpdatePublished()
    {
        $response = $this->putJson("{$this->urls['published']}/{$this->dataPublished['id']}", $this->dataPublished, $this->header);

        $response->assertStatus(200);
    }

    public function testDeletePublishedNotExistsPublished()
    {
        $this->dataPublished['id'] = 0;

        $response = $this->deleteJson("{$this->urls['published']}/{$this->dataPublished['id']}", $this->dataPublished, $this->header);

        $response->assertStatus(422);
    }

    public function testDeletePublished()
    {
        $response = $this->deleteJson("{$this->urls['published']}/{$this->dataPublished['id']}", $this->dataPublished, $this->header);

        $response->assertStatus(200);
    }
}
