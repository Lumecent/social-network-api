<?php

namespace Tests\Feature\API\V1;

use App\Helpers\Test\TestHelper;
use Illuminate\Support\Str;
use Tests\BaseTest;

class AuthControllerTest extends BaseTest
{
    private $dataRegister;
    private $dataLogin;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->dataRegister = [
            'name' => 'Mustafa',
            'email' => $this->faker->unique()->email,
            'password' => 'password',
            'password_confirm' => 'password',
        ];

        $this->dataLogin = [
            'email' => TestHelper::getUser()->email,
            'password' => 'password'
        ];

        $this->urls = [
            'register' => 'api/v1/auth/register',
            'login' => 'api/v1/auth/login',
            'logout' => 'api/v1/auth/logout'
        ];
    }

    public function testRegisterEmptyForm()
    {
        $response = $this->postJson($this->urls['register']);

        $response->assertStatus(422);
    }

    public function testRegisterWrongName()
    {
        $this->dataRegister['name'] = 'Mu';

        $response = $this->postJson($this->urls['register'], $this->dataRegister);

        $response->assertStatus(422);
    }

    public function testRegisterWrongEmail()
    {
        $this->dataRegister['email'] = 'email';

        $response = $this->postJson($this->urls['register'], $this->dataRegister);

        $response->assertStatus(422);
    }

    public function testRegisterWrongPassword()
    {
        $this->dataRegister['password'] = 'pass';

        $response = $this->postJson($this->urls['register'], $this->dataRegister);

        $response->assertStatus(422);
    }

    public function testRegisterWrongPasswordConfirm()
    {
        $this->dataRegister['password_confirm'] = 'pass';

        $response = $this->postJson($this->urls['register'], $this->dataRegister);

        $response->assertStatus(422);
    }

    public function testRegister()
    {
        $response = $this->postJson($this->urls['register'], $this->dataRegister);

        $response->assertStatus(200);
    }

    public function testLoginEmptyForm()
    {
        $response = $this->postJson($this->urls['login']);

        $response->assertStatus(422);
    }

    public function testLoginWrongEmail()
    {
        $this->dataLogin['email'] = 'wrong';

        $response = $this->postJson($this->urls['login'], $this->dataLogin);

        $response->assertStatus(422);
    }

    public function testLoginNotExistsEmail()
    {
        $this->dataLogin['email'] = 'not@exists.email';

        $response = $this->postJson($this->urls['login'], $this->dataLogin);

        $response->assertStatus(422);
    }

    public function testLoginWrongPassword()
    {
        $this->dataLogin['password'] = 'pass';

        $response = $this->postJson($this->urls['login'], $this->dataLogin);

        $response->assertStatus(422);
    }

    public function testLoginInvalidPassword()
    {
        $this->dataLogin['password'] = 'invalid';

        $response = $this->postJson($this->urls['login'], $this->dataLogin);

        $response->assertStatus(422);
    }

    public function testLogin()
    {
        $response = $this->postJson($this->urls['login'], $this->dataLogin);

        $response->assertStatus(200);
    }

    public function testLogoutEmptyToken()
    {
        $response = $this->postJson($this->urls['logout']);

        $response->assertStatus(401);
    }

    public function testLogoutWrongToken()
    {
        $bearer = "Bearer " . Str::random();

        $response = $this->postJson($this->urls['logout'], [], ['Authorization' => $bearer]);

        $response->assertStatus(401);
    }

    public function testLogout()
    {
        $token = TestHelper::authToken();

        $bearer = "Bearer {$token}";

        $response = $this->postJson($this->urls['logout'], [], ['Authorization' => $bearer]);

        $response->assertStatus(200);
    }
}
